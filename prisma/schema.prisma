// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

//User with an id, name and email as strings
model User {
    id              String @id @default(uuid())
    userId          String? @unique 
    organizationId  String?
    name            String
    email           String? @unique
    phoneNumber     String? @unique
    projects        Project[]
    tasks           Task[]
    role            Role @default(employee)
}

model Project {
    id              String @id @default(uuid())
    name            String
    organizationId  String
    users           User[]
    tasks           Task[]
    rooms           Room[]
    expense         Expense[] 
    progress        Int @default(0)
    status          Status @default(todo)
    dueDate         DateTime @default(now())
}

model Task {
    id              String      @id @default(uuid())
    name            String
    description     String
    users           User[]
    project         Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
    projectId       String
    rooms           Room[]
    expense         Expense[]      
    status          Status @default(todo)
    dueDate         DateTime @default(now())
    // This field is to identify whether we stop recursion in the db custom update method
    // TODO: Remove it once Prisma introduces custom arguments to update methods
    progressUpdate  Boolean? 
}   

model Room {
    id              String      @id @default(uuid())
    name            String
    type            RoomType
    tasks           Task[]
    project         Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
    projectId       String
    progress        Int @default(0)
    status          Status @default(todo)
    dueDate         DateTime @default(now())
}

model Expense {
    id              String      @id @default(uuid())
    name            String
    type            ExpenseType
    estimateQty     Float
    estimatePrice   Float
    quantity        Float?
    price           Float?
    project         Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
    projectId       String
    task            Task?        @relation(fields: [taskId], references: [id], onDelete: Cascade)
    taskId          String?
    estimateCost    Float @default(0)
    cost            Float @default(0)
}

enum RoomType {
    foyer
    lounge
    passage
    kitchen
    diningroom
    bedroom
    bathroom
    study
    basement
    laundy
    gym
    garage
    other
}

enum Status {
    todo
    inprogress
    done
    approved
}

enum Role {
    owner
    admin
    guest
    employee
}

enum ExpenseType {
    material
    labour
    fee
    other
}